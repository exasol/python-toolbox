import argparse
import sys
from argparse import (
    ArgumentParser,
    Namespace,
)
from inspect import cleandoc
from pathlib import Path

import nox
from nox import Session

from exasol.toolbox.error import ToolboxError
from exasol.toolbox.util.version import Version

_SUCCESS = 0
_FAILURE = 1

# fmt: off
_VERSION_MODULE_TEMPLATE = cleandoc('''
    # ATTENTION:
    # This file is generated by exasol/toolbox/nox/_package_version.py when using:
    #   * either "poetry run -- nox -s project:fix"
    #   * or "poetry run -- nox version:check -- <path/version.py> --fix"
    # Do not edit this file manually!
    # If you need to change the version, do so in the pyproject.toml, e.g. by using `poetry version X.Y.Z`.
    MAJOR = {major}
    MINOR = {minor}
    PATCH = {patch}
    VERSION = f"{{MAJOR}}.{{MINOR}}.{{PATCH}}"
    __version__ = VERSION
''') + "\n"
# fmt: on


def write_version_module(version: Version, path: str, exists_ok: bool = True) -> None:
    version_file = Path(path)
    if version_file.exists() and not exists_ok:
        raise ToolboxError(f"Version file [{version_file}] already exists.")
    version_file.unlink(missing_ok=True)
    with open(version_file, "w", encoding="utf-8") as f:
        f.write(
            _VERSION_MODULE_TEMPLATE.format(
                major=version.major, minor=version.minor, patch=version.patch
            )
        )


def _create_parser() -> ArgumentParser:
    parser = ArgumentParser(
        prog="nox -s version:check --",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("version_module", help="Path to version module")
    parser.add_argument("files", nargs="*")
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="enabled debug mode for execution.",
    )
    parser.add_argument(
        "-f",
        "--fix",
        action="store_true",
        default=False,
        help="fix instead of check.",
    )
    return parser


def _main_debug(args: Namespace) -> int:
    module_version = Version.from_python_module(args.version_module)
    poetry_version = Version.from_poetry()

    if args.fix:
        write_version_module(poetry_version, args.version_module)

    if module_version != poetry_version:
        print(
            f"Version in pyproject.toml {poetry_version} and {args.version_module} {module_version} do not match!"
        )
        if args.fix:
            print(
                f"Updating version in file ({args.version_module}) from {module_version} to {poetry_version}"
            )
            return _SUCCESS

        return _FAILURE

    return _SUCCESS


def _main(args: Namespace) -> int:
    try:
        return _main_debug(args)
    except Exception as ex:
        print(f"Error while executing program, details: {ex}", file=sys.stderr)
        return _FAILURE


@nox.session(name="version:check", python=False)
def version_check(session: Session) -> None:
    """"""
    parser = _create_parser()
    args = parser.parse_args(session.posargs)
    entry_point = _main if not args.debug else _main_debug
    if entry_point(args):
        session.error()
